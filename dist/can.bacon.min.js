!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("bacon"),require("can"),require("can.eventstream"));else if("function"==typeof define&&define.amd)define(["bacon","can","can.eventstream"],t);else{var n="object"==typeof exports?t(require("bacon"),require("can"),require("can.eventstream")):t(e.Bacon,e.can,e["can.eventstream"]);for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,function(e,t,n){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e,t,n){return e.isComputed?t[1]:e.getEventValueForStream?e.getEventValueForStream(t,n):t[0]}var o=n(1),a=n(2);n(3),o.Observable.prototype.toCompute=function(){var e=void 0!==arguments[0]?arguments[0]:a.compute();return a.bindComputeFromStream(this,e)},o.Observable.prototype.toMap=function(){var e=void 0!==arguments[0]?arguments[0]:new a.Map;return a.bindMapFromStream(this,e)},o.Observable.prototype.toList=function(){var e=void 0!==arguments[0]?arguments[0]:new a.List;return a.bindListFromStream(this,e)},a.EventStream={},a.EventStream.isEventStream=function(e){return e instanceof o.Observable},a.EventStream.onValue=function(e,t){return e.onValue(t)},a.EventStream.bind=function(e,t,n){t=null==t?"change":t;var u=o.fromBinder(function(u){function i(){u(new o.Next(r(e,arguments)))}return n?a.delegate.call(e,n,t,i):a.bind.call(e,t,i),function(){return n?a.undelegate.call(e,n,t,i):a.unbind.call(e,t,i)}});return e.isComputed&&(u=u.toProperty(e())),u},a.EventStream.untilStream=function(e,t){return e.takeUntil(t)}},function(t){t.exports=e},function(e){e.exports=t},function(e){e.exports=n}])});
//# sourceMappingURL=can.bacon.min.js.map